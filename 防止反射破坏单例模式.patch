Index: a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/LazyInnerClassSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/LazyInnerClassSingleton.java	(revision 37ff0911a8e06fc739a61fb099a2e204e506fbb0)
+++ a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/LazyInnerClassSingleton.java	(date 1552645982099)
@@ -1,8 +1,15 @@
 package com.lx.learning.designpattern.singleton.lazy;
 
+/**
+ * 懒加载+防止反射+防止反序列化
+ */
 public class LazyInnerClassSingleton {
 
-    private LazyInnerClassSingleton() { }
+    private LazyInnerClassSingleton() {
+        if ( LazyHolder.instance != null ){
+            throw  new RuntimeException("单例已存在，不允许重新创建");
+        }
+    }
 
     public LazyInnerClassSingleton getInstance(){
         return LazyHolder.instance;
Index: a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/SafeLazySingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/SafeLazySingleton.java	(revision 37ff0911a8e06fc739a61fb099a2e204e506fbb0)
+++ a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/lazy/SafeLazySingleton.java	(date 1552645982114)
@@ -4,9 +4,7 @@
     private static SafeLazySingleton instance = null;
 
     private SafeLazySingleton() {
-        if (instance != null){
-            throw  new RuntimeException("单例已存在，不允许重新创建");
-        }
+
     }
 
     public static SafeLazySingleton getInstance() {
@@ -19,4 +17,5 @@
         }
         return instance;
     }
+
 }
Index: a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/test/ReflectSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/test/ReflectSingleton.java	(revision 37ff0911a8e06fc739a61fb099a2e204e506fbb0)
+++ a-design-pattern/src/main/java/com/lx/learning/designpattern/singleton/test/ReflectSingleton.java	(date 1552645789156)
@@ -1,8 +1,30 @@
 package com.lx.learning.designpattern.singleton.test;
 
+import com.lx.learning.designpattern.singleton.hungry.HungrySingleton;
+import com.lx.learning.designpattern.singleton.lazy.SafeLazySingleton;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
 public class ReflectSingleton {
 
     public static void main(String[] args) {
-
+        Class<HungrySingleton> clazz=HungrySingleton.class;
+        try {
+            Constructor<HungrySingleton> constructor = clazz.getDeclaredConstructor();
+            constructor.setAccessible(true);
+            HungrySingleton singleton1=constructor.newInstance();
+            HungrySingleton singleton2=constructor.newInstance();
+            System.out.println("Singleton1 hashCode==>"+singleton1.hashCode());
+            System.out.println("Singleton2 hashCode==>"+singleton2.hashCode());
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        }
     }
 }
